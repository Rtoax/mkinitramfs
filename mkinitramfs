#!/bin/bash -e
# This file based in part on the mkinitramfs script for the LFS LiveCD
# written by Alexander E. Patrakov and Jeremy Huntwork.
# Adapted by Emmett1 to use with Venom Linux

copy_modules() {
	pushd /lib/modules/$KERNEL_VERSION/ >/dev/null
		mod=$(find kernel -type f -name $1.ko*)
	popd >/dev/null
	if [ ! -n "$mod" ]; then
		return
	fi
	cp -R --parent /lib/modules/$KERNEL_VERSION/$mod $WDIR
	dep=$(cat /lib/modules/$KERNEL_VERSION/modules.dep | grep -E /$(basename $mod): | sed 's/.*://')
	if [ -n "$dep" ]; then
		for i in $dep; do
			i=$(basename $i)
			i=$(echo ${i%*.ko*})
			copy_modules $i
		done
	fi
	unset dep mod
	shift
	if [ "$1" ]; then
		copy_modules $@
	fi
}

copy()
{
	local file

	if [ "$2" == "lib" ]; then
		file=$(PATH=/lib:/usr/lib type -p $1)
	else
		file=$(PATH=/bin:/usr/bin:/sbin:/usr/sbin type -p $1)
	fi

	if [ ! -z $file ] ; then
		cp $file $WDIR/$2
	else
		echo "Missing required file: $1 for directory $2"
		rm -rf $WDIR
    exit 1
  fi
}

msg() {
	[ $QUIET ] && return
	echo ":: $@"
}

msgerr() {
	[ $QUIET ] && return
	echo "ERROR: $@"
}

interrupted() {
	cleanup
	echo
	msgerr "Aborted by user!"
	exit 1
}

cleanup() {
	rm -fr $WDIR $unsorted
}

usage() {
	
	cat << EOF
Usage:
  $(basename $0) <option> <argument>

Options:
  -k <version>  custom kernel version
  -o <output>   custom output name
  -i <init>     custom init file
  -a            autodetect required modules
  -f            include firmware
  -n            exclude kernel modules
  -q            quiet mode
  -h            print this help msg
	
EOF
}

trap "interrupted" SIGHUP SIGINT SIGQUIT SIGTERM

CONFIG="/etc/mkinitramfs.conf"

while [ $1 ]; do
	case $1 in
		-k)	if [ -z $2 ]; then
				echo "argument is needed for this option"
				exit 1
			fi
			KERNEL=$2
			shift 1 ;;
		-o)	if [ -z $2 ]; then
				echo "argument is needed for this option"
				exit 1
			fi
			OUTPUT=$2
			shift 1 ;;
		-i)	if [ -z $2 ]; then
				echo "argument is needed for this option"
				exit 1
			fi
			INIT=$2
			shift 1 ;;
		-c)	if [ -z $2 ]; then
				echo "argument is needed for this option"
				exit 1
			fi
			CONFIG=$2
			shift 1 ;;
		-a) AUTOMOD=1 ;;
		-n) NOKMOD=1 ;;
		-f)	FIRMWARE=1 ;;
		-q)	QUIET=1 ;;
		-h)	usage; exit 0 ;;
		*)	echo "ERROR: invalid option '$1'"
			exit 1 ;;
	esac
	shift
done

if [ "$UID" != "0" ]; then
	msgerr "need root access!"
	exit 1
fi

if [ ! -d  ]; then
	msgerr "directory  does not exist!"
	exit 1
fi

if [ "$KERNEL" ]; then
	if [ -d /lib/modules/"$KERNEL" ]; then
		KERNEL_VERSION="$KERNEL"
	else
		msgerr "kernel directory '/lib/modules/$KERNEL' not exist"
		exit 1
	fi
else
	if [ -d /lib/modules/$(uname -r) ]; then
		KERNEL_VERSION=$(uname -r)
	else
		NOKMOD=1
	fi
fi

INITRAMFS_FILE=initrd-$KERNEL_VERSION.img

if [ "$NOKMOD" = 1 ]; then
	INITRAMFS_FILE=initrd-no-kmod.img
fi

if [ "$OUTPUT" ]; then
	if [ $(basename $OUTPUT) != "$OUTPUT" ] && [ ! -d $(dirname $OUTPUT) ]; then
		msgerr "directory '$(dirname $OUTPUT)' for output '$(basename $OUTPUT)' not exist"
		exit 1
	fi
	INITRAMFS_FILE="$OUTPUT"
fi

if [ "$INIT" ]; then
	INITIN="$INIT"
else
	INITIN="/usr/share/mkinitramfs/init.in"
fi

if [ ! -f "$INITIN" ]; then
	msgerr "file init '$INITIN' not exist"
	exit 1
fi

if [ -f "$CONFIG" ]; then
	. "$CONFIG"
else
	msgerr "Config file '$CONFIG' not found"
fi

[ $QUIET ] || echo "Creating $INITRAMFS_FILE..."

binaries="bash sh cat cp dd killall ls mkdir mknod mount find xargs grep fgrep"
binaries="$binaries umount sed sleep ln rm uname chroot chmod"
binaries="$binaries readlink basename modprobe blkid switch_root"
binaries="$binaries udevd udevadm" # udev

if [ "${#BINARIES[@]}" -gt 0 ]; then
	binaries="$binaries ${BINARIES[@]}"
fi

unsorted=$(mktemp /tmp/unsorted.XXXXXXXXXX)

# Create a temporary working directory
msg "creating working directory..."
WDIR=$(mktemp -d /tmp/initrd-work.XXXXXXXXXX)

# Create base directory structure
msg "creating base structure directory..."
mkdir -p $WDIR/{bin,dev,lib/firmware,run,sys,proc,usr}
mkdir -p $WDIR/etc/{modprobe.d,udev/rules.d}
touch $WDIR/etc/modprobe.d/modprobe.conf
ln -s lib $WDIR/lib64
ln -s ../bin $WDIR/usr/bin
ln -s bin $WDIR/sbin
ln -s ../bin $WDIR/usr/sbin

# Create necessary device nodes
msg "creating device nodes..."
mknod -m 640 $WDIR/dev/console c 5 1
mknod -m 664 $WDIR/dev/null    c 1 3

# Install the udev configuration files
msg "copying udev configuration..."
if [ -f /etc/udev/udev.conf ]; then
	cp --parent /etc/udev/udev.conf $WDIR
fi

for file in $(find /etc/udev/rules.d/ -type f) ; do
	cp --parent $file $WDIR
done

if [ -d /lib/udev ]; then
	cp -a /lib/udev $WDIR/lib
fi
# remove unneeded udev rules
rm -f $WDIR/lib/udev/rules.d/60-vboxdrv.rules $WDIR/lib/udev/rules.d/69-xorg-vmmouse.rules

# Install firmware
if [ "$FIRMWARE" = 1 ]; then
	msg "copying firmware..."
	cp -Ra --parent /lib/firmware $WDIR
fi

# Install the init file
msg "copying init file..."
install -m0755 $INITIN $WDIR/init

if [ "$NOKMOD" != 1 ]; then
	if [ -x /bin/kmod ] ; then
		binaries="$binaries kmod"
	else
		binaries="$binaries lsmod"
		binaries="$binaries insmod"
	fi
fi

msg "copying binaries..."
for i in $binaries; do
	copy $i bin
	ldd $(PATH=/bin:/usr/bin:/sbin:/usr/sbin type -p $i) | sed "s/\t//" | cut -d " " -f1 >> $unsorted
done

# Add module symlinks if appropriate
if [ -n "$KERNEL_VERSION" ] && [ -x $WDIR/bin/kmod ] ; then
	ln -s kmod $WDIR/bin/lsmod
	ln -s kmod $WDIR/bin/insmod
fi

# Install libraries
msg "copying libraries..."
sort $unsorted | uniq | grep -v ^not$ | while read library ; do
	if [ "$library" == "linux-vdso.so.1" ] || [ "$library" == "linux-gate.so.1" ]; then
		continue
	fi
	copy $library lib
done

# copy terminfo
if [ -f /usr/share/terminfo/l/linux ]; then
	msg "copying linux terminfo..."
	cp --parent /usr/share/terminfo/l/linux $WDIR
fi

# copy requested files
if [ "${#FILES[@]}" -gt 0 ]; then
	for f in ${FILES[@]}; do
		if [ -e $f ]; then
			cp --parent $f $WDIR
		fi
	done
fi

# extra modules for livecd
extra_modules="cdrom mmc_core rtsx_pci rtsx_pci_sdmmc rtsx_pci_ms mmc_block ssb lpc_ich sdhci-acpi sdhci-pltfm sdhci sdhci-pci "

# Install the kernel modules if requested
if [ "$NOKMOD" != 1 ]; then
	if [ "$AUTOMOD" = 1 ]; then
		msg "copying automod modules..."
		for i in $(lsmod | awk 'NF==3{print $1}{}'); do
			copy_modules $i
		done
	else
		msg "copying modules..."
		for modules in $(find /lib/modules/$KERNEL_VERSION/kernel/{crypto,fs} \
			/lib/modules/$KERNEL_VERSION/kernel/drivers/{block,ata,input,scsi} \
			/lib/modules/$KERNEL_VERSION/kernel/drivers/{hid,usb/{host,storage}} \
			-type f 2> /dev/null); do
			modules=$(basename $modules)
			modules=$(echo ${modules%*.ko*})
			copy_modules $(basename $modules)
		done
		copy_modules $extra_modules
	fi
	
	if [ "${#MODULES[@]}" -gt 0 ]; then
		copy_modules ${MODULES[@]}
	fi

	cp /lib/modules/$KERNEL_VERSION/modules.* \
			$WDIR/lib/modules/$KERNEL_VERSION

	depmod -b $WDIR $KERNEL_VERSION
fi

msg "compressing initramfs..."
rm -f $INITRAMFS_FILE
( cd $WDIR ; find . | cpio -o -H newc --quiet | gzip -9 ) > $INITRAMFS_FILE

# Remove the temporary directory and file
cleanup
[ $QUIET ] || echo "Done $INITRAMFS_FILE"

exit 0
