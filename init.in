#!/bin/bash

PATH=/bin:/usr/bin:/sbin:/usr/sbin
export PATH

shell() {
	setsid sh -c 'exec sh </dev/tty1 >/dev/tty1 2>&1'
}

problem() {
	echo
	echo "problem occurs, here's a shell."
	echo
	shell
}

msg() {
	[ "$verbose" = 1  ] || return
	echo ":: $*"
}

findmedia() {
	local device
	msg "finding media..."
	for device in /dev/sd* /dev/sr*; do
		[ -b $device ] || continue
		msg "find in $device..."
		mount -o ro $device $MEDIUM &>/dev/null && \
		if [ -f $MEDIUM/isolinux/venomlive ]; then
			msg "media found: $device"
			MEDIA=$device
			break
		else
			umount $MEDIUM
		fi
	done
}

mount_root() {
	mkdir -p $ROOT
	
	[ -n "$rootflags" ] && rootflags="$rootflags,"
	rootflags="$rootflags$ro"

	case "$root" in
		/dev/* ) device=$root ;;
		UUID=* ) eval $root; device="/dev/disk/by-uuid/$UUID"  ;;
		LABEL=*) eval $root; device="/dev/disk/by-label/$LABEL" ;;
		""     ) echo "No root device specified." ; sh    ;;
	esac

	while [ ! -b "$device" ] ; do
		echo "no device: $device"
		shell
	done

	if ! mount -n -t "$rootfstype" -o "$rootflags" "$device" "$ROOT" ; then
		echo "cant mount: $device"
		shell
	fi
}

mount_live() {
	MEDIUM=/medium
	SYSTEM=/system
	mkdir -p $MEDIUM $SYSTEM
	findmedia
	if [ "$MEDIA" = "" ]; then
		msg "Media not found, will try again in $delay seconds..."
		sleep $delay
		findmedia
		if [ "$MEDIA" = "" ]; then
			msg "media still not found!"
			msg "you've been dropped to a shell."
			shell
		fi
	fi
	msg "mounting root.sfs to $SYSTEM..."
	mount -t squashfs -o ro,loop $MEDIUM/filesystem/root.sfs $SYSTEM || problem
	
	# overlayfs mount
	WRITEDIR=/venom/write
	WORKDIR=/venom/work
	mkdir -p /venom
	mount -t tmpfs -o rw tmpfs /venom
	mkdir -p $WRITEDIR $WORKDIR $ROOT

	msg "mounting overlays to $ROOT..."
	mount -t overlay overlay -o upperdir=$WRITEDIR,lowerdir=$SYSTEM,workdir=$WORKDIR $ROOT || problem

	if [ -d $MEDIUM/virootfs/ ]; then
		msg "mopying custom files to $ROOT..."
		cp -aR $MEDIUM/virootfs/* $ROOT/ || problem
	fi

	# Tell system to skip fsck during startup
	> $ROOT/fastboot

	# Execute custom script before switch root
	if [ -f $ROOT/root/custom_script.sh ]; then
		msg "running 'custom_script.sh' script..."
		chmod +x $ROOT/root/custom_script.sh
		chroot $ROOT bash /root/custom_script.sh 2>/dev/null
	fi

	# Move mounted squashfs file to new root
	mkdir -p $ROOT/lib/initramfs/{$SYSTEM,$MEDIUM}
	mount --move $SYSTEM $ROOT/lib/initramfs/$SYSTEM
	mount --move $MEDIUM $ROOT/lib/initramfs/$MEDIUM
}

load_livecd_modules() {
	local mod
	for mod in dm-mod md-mod ehci-pci overlay \
		xhci-pci xhci-hcd ehci-hcd nls_iso8859_1 \
		uhci-hcd uas sr_mod usb-storage loop \
		squashfs isofs vfat fat nls_cp437; do
		modprobe $mod 2>/dev/null
	done
}

init=/sbin/init
root=
rootdelay=
rootfstype=auto
ro="ro"
rootflags=
device=
initramfs=
verbose=
delay=5
ROOT=/newroot

mount -n -t devtmpfs devtmpfs /dev
mount -n -t proc     proc     /proc
mount -n -t sysfs    sysfs    /sys
mount -n -t tmpfs    tmpfs    /run

read -r cmdline < /proc/cmdline

for param in $cmdline ; do
	case $param in
		init=*      ) init=${param#init=}             ;;
		root=*      ) root=${param#root=}             ;;
		rootdelay=* ) rootdelay=${param#rootdelay=}   ;;
		rootfstype=*) rootfstype=${param#rootfstype=} ;;
		rootflags=* ) rootflags=${param#rootflags=}   ;;
		ro          ) ro="ro"                         ;;
		rw          ) ro="rw"                         ;;
		initramfs   ) initramfs=1                     ;;
		verbose     ) verbose=1                       ;;
		delay       ) delay=${param#delay=}           ;;
	esac
done

udevd --daemon --resolve-names=never
udevadm trigger --action=add    --type=subsystems
udevadm trigger --action=add    --type=devices
udevadm trigger --action=change --type=devices
udevadm settle

if [ "$initramfs" = 1 ]; then
	shell
fi

if [ "$root" = "" ]; then
	load_livecd_modules
	mount_live
else
	mount_root
fi

killall -w udevd

mount --move /proc $ROOT/proc
mount --move /sys $ROOT/sys
mount --move /dev $ROOT/dev

exec switch_root "$ROOT" "$init" "$@"

problem
